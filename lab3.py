# -*- coding: utf-8 -*-
"""lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M5LxxQlSWsgic1SUBliFFHO_Z07voRg-

Импорт библиотек
"""

import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt

bgr_image = cv.imread('/content/drive/MyDrive/Обработка изображений/IMG-1856.PNG')
rgb_image = cv.cvtColor(bgr_image, cv.COLOR_BGR2RGB)
lut = lambda i: 255 - i

range_hist = [0, 256]

inv_image = lut(rgb_image)
inv_image


gray_inv_image = cv.cvtColor(inv_image, cv.COLOR_BGR2GRAY)

gs = plt.GridSpec(1, 2)
plt.figure(figsize=(10, 8))
plt.subplot(gs[0])
plt.imshow(gray_inv_image, cmap='gray', vmin=0, vmax=255)
plt.subplot(gs[1])
plt.hist(gray_inv_image.reshape(-1), 256, range_hist)
plt.show()

plt.figure(figsize=(30, 30))
plt.subplot(gs[0])
plt.imshow(rgb_image, cmap='gray', vmin=0, vmax=255)

lut_adapt = lambda i: np.int32(255 * ((i - np.min(i)) / (np.max(i) - np.min(i))))
result_image = lut_adapt(inv_image)
result_image[:,:,1] += 10
result_image[:,:,2] -= 25
result_image[:,:,0] -= 5

plt.figure(figsize=(30, 30))
plt.subplot(gs[0])
plt.imshow(inv_image, cmap='gray', vmin=0, vmax=255)
plt.subplot(gs[1])
plt.imshow(result_image, cmap='gray', vmin=0, vmax=255)

result_image



gray_image = cv.cvtColor(np.float32(result_image), cv.COLOR_BGR2GRAY)

gs = plt.GridSpec(3, 2)

r = 88
rows, cols = gray_image.shape
crow, ccol = np.uint32((rows / 2, cols / 2))

mask = np.zeros((rows, cols, 2), np.uint8)
mask[crow - r:crow + r, ccol - r:ccol + r] = 1

dft = cv.dft(np.float32(gray_image), flags=cv.DFT_COMPLEX_OUTPUT)
dft_shift = np.fft.fftshift(dft)

dft_shift_masked = dft_shift * mask
f_ishift = np.fft.ifftshift(dft_shift_masked)
img_back = cv.idft(f_ishift)
img_back = cv.magnitude(img_back[..., 0], img_back[..., 1])

magnitude_dft_shift = 20 * np.log(
    cv.magnitude(dft_shift[..., 0], dft_shift[..., 1]))
magnitude_dft_shift_masked = 20 * np.log(
    cv.magnitude(dft_shift_masked[..., 0], dft_shift_masked[..., 1]))

kernel55 = np.ones((3, 3), np.float32) / 9

plt.figure(figsize=(40, 40))
plt.subplot(gs[0,0]), plt.imshow(result_image, cmap='gray')
plt.title('Исходное изображение'), plt.xticks([]), plt.yticks([])
plt.subplot(gs[0,1]), plt.imshow(magnitude_dft_shift, cmap='gray')
plt.title('Амплитудный спектр изображения'), plt.xticks([]), plt.yticks([])
plt.subplot(gs[1,0]), plt.imshow(cv.cvtColor(img_back, cv.COLOR_GRAY2BGR), cmap='gray')
plt.title('Восстановленное изображение'), plt.xticks([]), plt.yticks([])
plt.subplot(gs[1,1]), plt.imshow(magnitude_dft_shift_masked, cmap='gray')
plt.title('Обрезанный спектр'), plt.xticks([]), plt.yticks([])
plt.subplot(gs[2,0]), plt.imshow(cv.medianBlur(gray_image, 3), cmap='gray')
plt.title('Обрезанный спектр'), plt.xticks([]), plt.yticks([])
plt.show()

smoosed_img = cv.medianBlur(np.float32(result_image), 3)
plt.figure(figsize=(20, 20))
plt.subplot(gs[0,0]), plt.imshow(result_image, cmap='gray')
plt.title('Исходное изображение'), plt.xticks([]), plt.yticks([])
plt.subplot(gs[0,1]), plt.imshow(np.uint32(smoosed_img), cmap='gray')
plt.title('Изображение после медианного фильтра'), plt.xticks([]), plt.yticks([])

gray_image = cv.cvtColor(np.float32(result_image), cv.COLOR_BGR2GRAY)

r = 30
rows, cols = gray_image.shape
crow, ccol = np.uint32((rows / 2, cols / 2))
# create a mask first, center square is 1, remaining all zeros
mask = np.zeros((rows, cols, 2), np.uint8)
mask[crow - r:crow + r, ccol - r:ccol + r] = 1

# вычисляем фурье-образ
dft = cv.dft(gray_image, flags=cv.DFT_COMPLEX_OUTPUT)
dft_shift = np.fft.fftshift(dft)

# применяем маску и делаем обратное преобразование Фурье
dft_shift_masked = dft_shift * mask
f_ishift = np.fft.ifftshift(dft_shift_masked)
img_back = cv.idft(f_ishift)
img_back = cv.magnitude(img_back[..., 0], img_back[..., 1])

magnitude_dft_shift = 20 * np.log(
    cv.magnitude(dft_shift[..., 0], dft_shift[..., 1]))
magnitude_dft_shift_masked = 20 * np.log(
    cv.magnitude(dft_shift_masked[..., 0], dft_shift_masked[..., 1]))

plt.figure(figsize=(10, 10))
plt.subplot(221), plt.imshow(rgb_image, cmap='gray')
plt.title('Исходное изображение'), plt.xticks([]), plt.yticks([])
plt.subplot(222), plt.imshow(magnitude_dft_shift, cmap='gray')
plt.title('Амплитудный спектр изображения'), plt.xticks([]), plt.yticks([])
plt.subplot(223), plt.imshow(cv.cvtColor(img_back, cv.COLOR_GRAY2BGR), cmap='gray')
plt.title('Восстановленное изображение'), plt.xticks([]), plt.yticks([])
plt.subplot(224), plt.imshow(magnitude_dft_shift_masked, cmap='gray')
plt.title('Обрезанный спектр'), plt.xticks([]), plt.yticks([])
plt.show()